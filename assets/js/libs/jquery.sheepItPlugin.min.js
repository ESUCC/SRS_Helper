/**
 * SheepIt! Jquery Plugin
 * http://www.mdelrosso.com/sheepit/
 *
 * @version 1.1.1
 *
 * Created By Mariano Del Rosso (http://www.mdelrosso.com)
 *
 * Thanks to:
 *  Hubert Galuszka: Continuous index option and support for tabular forms
 *  Gabriel Alonso: Bugfixes
 *
 * @license
 * 
 * SheepIt is free software: you can redistribute it and/or modify
 * it under the terms of the MIT license
 * 
 * SheepIt is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * MIT license for more details.
 * 
 * You should have received a copy of the MIT license
 * along with SheepIt.  If not, see <http://en.wikipedia.org/wiki/MIT_License>.
 */

(function($){
    
    jQuery.fn.sheepItTemplate = function(options){
        
        function cloneTemplate()
        {
            var clone;

            // Before clone callBack function
            if (typeof options.beforeClone === "function") {
                options.beforeClone(source, template);
            }
            
            clone = template.cloneWithAttribut(true);

            // After clone callBack function
            if (typeof options.afterClone === "function") {
                options.afterClone(source, clone);
            }

            // Get source
            clone.getSource = function() {
                return source;
            };

            return clone;
        }
        
         /**
         * Remove form from the index and DOM
         */
        function removeForm(formToRemove)
        {
            // If no form provided then remove the last one
            if (typeof formToRemove == 'undefined') {
                return false;
            }

            index = formToRemove.data('formIndex');
            /**
             * Remove separator?
             */
            // Two
            if (formToRemove.data('previousSeparator') && formToRemove.data('nextSeparator')) {
                formToRemove.data('previousSeparator').remove();
                formToRemove.data('previousForm').data('nextSeparator',formToRemove.data('nextSeparator'));
            }
            // before
            else if(formToRemove.data('previousSeparator') && !formToRemove.data('nextSeparator')) {
                formToRemove.data('previousSeparator').remove();
                formToRemove.data('previousForm').data('nextSeparator',false);
            }
            // after
            else if(!formToRemove.data('previousSeparator') && formToRemove.data('nextSeparator')) {
                formToRemove.data('nextSeparator').remove();
                formToRemove.data('nextForm').data('previousSeparator',false);
            }

            // Update forms references
            if (formToRemove.data('previousForm')) {
                formToRemove.data('previousForm').data('nextForm',formToRemove.data('nextForm'));
            }

            if (formToRemove.data('nextForm')) {
                formToRemove.data('nextForm').data('previousForm',formToRemove.data('previousForm'));
            }

            // From index
            forms[index] = false;

            // From DOM
            formToRemove.remove();
            
            form_counter--;
            
            normalizeForms();
            parent.normalizeAll();

            return true;

        }
        
        function canAddForm()
        {

            if (options.maxFormsCount == 0) {
                return true;
            } else {
                return (count() < options.maxFormsCount) ? true : false;
            }
        }
        
        /**
         * Get active forms
         */
        function getForms()
        {
            if (hasForms()) {
               var activeForms = [];
               for (var x=0; x < forms.length; x++) {
                   if(forms[x]) activeForms.push(forms[x]);
               }
               return activeForms;
            } else {
                return false;
            }
        }

        function hasForms()
        {
            return (form_counter > 0) ? true : false;
        }
        
        function getIndex(){
            return index;
        }
        
         /**
         * Get a form and normalize fields id and names to match the current position
         */
        function normalizeFieldsForForm(form, index)
        {
            form.find(formFields).each(function(){
                var that = $(this);
                if(typeof that != 'function'){
                    var idTemplateAttr = that.attr("id")
                        ,nameTemplateAttr = that.attr("name")
                        ,idAttr = that.attr("id")
                        ,nameAttr = that.attr("name")

                    /* Normalize field name attributes */
                    var newNameAttr = nameTemplateAttr.replace(options.indexFormat, index);
                    that.attr("name", newNameAttr);

                    /* Normalize field id attributes */
                    var newIdAttr = idTemplateAttr.replace(options.indexFormat, index);

                    form.find("label[for='"+idAttr+"']").each(function(){
                            $(this).attr("for", newIdAttr);
                        });
                    that.attr("id", newIdAttr);
                }
            });
        }

        function normalizeLabelsForForm(form, index)
        {
            setLabelForForm(form, index+1);
        }

        function setLabelForForm(form, label)
        {
            form.find(options.labelSelector).html(label);
            return true;
        }

        function getLabelForForm(form)
        {
            return form.find(options.labelSelector).html();
        }
        
        function normalizeForms(){
            var show_hide = count() > options.minFormsCount;
            for(var x = 0; x < forms.length; x++){
                if (forms[x]) {
                    var removeCurrent = forms[x].find(options.removeCurrentSelector);
                    show_hide ? removeCurrent.show() : removeCurrent.hide();
                }
            }
        }
        
        /*function showRemoveCurrent(show){
            if(show) re
        }*/
                
        function normalizeForm(form, index)
        {
            if (typeof index == 'undefined') {
                index=getIndex();
            }
            
            var idTemplate=source.data("template");

            // Normalize form id
            if (form.attr("id")) {
                form.attr("id", idTemplate + index);
            }
            
            // Normalize indexes for fields name and id attributes
            normalizeFieldsForForm(form, index);

            // Normalize labels
            normalizeLabelsForForm(form, index);

            // Normalize other possibles indexes inside html
            if (form.html().indexOf(options.indexFormat) != -1) {
                // Create a javascript regular expression object
                var re = new RegExp(options.indexFormat,"ig");
                // Replace all index occurrences inside the html
                form.html(form.html().replace(re, index));
            }
            
            // Remove current form control
            var removeCurrent = form.find(options.removeCurrentSelector);
            if(options.allowRemoveCurrent && (options.minFormsCount < count())){
                removeCurrent.show();
            }
            else{
                removeCurrent.hide();
            }
            return form;
        }
        
        /**
         * Normalize options
         */
        function normalizeOptions(options)
        {
            // Normalize limits options
            if (options.maxFormsCount > 0) {
                if (options.maxFormsCount < options.minFormsCount) {
                    options.maxFormsCount = options.minFormsCount;
                }
                if (options.iniFormsCount < options.minFormsCount || options.iniFormsCount > options.maxFormsCount) {
                    options.iniFormsCount = options.minFormsCount;
                }
            } else {
                if (options.iniFormsCount < options.minFormsCount) {
                    options.iniFormsCount = options.minFormsCount;
                }
            }

            if (!canRemoveAllForms()) {
                options.allowRemoveAll = false;
            }
        }
        
        function canRemoveAllForms()
        {
           return (options.minFormsCount == 0) ? true : false;
        }
        
        function setOptions(newOptions) 
        {
            options = [];
            options = $.extend(defaults, newOptions);
            normalizeOptions(options);
        }
        
        function getOptions()
        {
            return options;
        }
        
        function initialize(){
            var minForms = source.data("min-forms");
            if(typeof minForms != 'undefined'){
                setOption('minFormsCount', minForms);
            }
            
            var iniForms = source.data("ini-forms");
            if(typeof iniForms != 'undefined'){
                setOption('iniFormsCount', iniForms);
            }
        }
        
                /**
         * Count the current elements
         */
        function count()
        {
            return form_counter;
        }
        
        /**
         * Handle click on Remove current button
         */
        function clickOnRemoveCurrent(event)
        {
            event.preventDefault();

            // Before remove current callBack function
            if (typeof parent.getOptions().beforeRemoveCurrent === "function") {
                parent.getOptions().beforeRemoveCurrent(source);
            }
            
            if (parent.getOptions().removeCurrentConfirmation) {
                if ( confirm(parent.getOptions().removeCurrentConfirmationMsg) ) {
                    removeForm($(this).closest(".sheep_it_duplicator_row"));
                }
            } else {
                removeForm($(this).closest(".sheep_it_duplicator_row"));
            }
            
            // After remove current callBack function
            if (typeof parent.getOptions().afterRemoveCurrent === "function") {
                parent.getOptions().afterRemoveCurrent(source);
            }
        }
        
        function addForm(){
            if(canAddForm()){
                var newForm = cloneTemplate();
                newForm = normalizeForm(newForm, getIndex());

                // Index
                newForm.data('formIndex', getIndex());
                
                var removeCurrentBtn = newForm.find(options.removeCurrentSelector).first();
                removeCurrentBtn.click(clickOnRemoveCurrent);

                forms.push(newForm);
                index++;
                form_counter++;
                
                
                
                return newForm;
            }else{
                return false;
            }
        }
        
        function disableOldRows(){
            for(x in forms){
                if($(".row_id", forms[x]).val() != 0){
                    $(forms[x]).addClass('sheep_row_disabled');
                    $("input, select, textarea", forms[x]).attr('disabled','disabled');
                    $(".sheepItField[type='radio']", forms[x]).iCheck('update')
                }
            }
        }
        
        function setOption(option, value) {
            if (typeof(option) != 'undefined' && typeof(value) != 'undefined') {
                options[option] = value;
                return options[option];
            } else {
                return false;
            }
        }
        
        /**
         * Extends source object with many useful methods,
         * used to control sheepIt forms with javascript
         */
        function extendSource(source)
        {
            // API
            $.extend( source, {
                /* ----- Options ----- */
                getOptions: function() {
                    return getOptions();
                },
                getOption: function(option) {
                    return options[option];
                },
                /* ----- Forms ----- */
                // Get all Forms
                getForms: function() {
                    return getForms();
                },
                // Alias of getForms
                getAllForms: function() {
                    return getForms();
                },
                getForm: function(val) {
                    if (typeof(val) != 'undefined') {
                        val++;
                    } 
                    return getForm(val);
                },
                getLastForm: function() {
                    return getForm();
                },
                getFirstForm: function() {
                    first();
                    return getCurrentForm();
                },
                addForm: function(form) {
                    return addForm(form);
                },
                addNForms: function(n) {
                    return addNForms(n);
                },
                disableOldRows: function(){
                    return disableOldRows();
                },
                // Number of active forms
                getFormsCount: function() {
                    return getFormsCount();
                },
                hasForms: function() {
                    return hasForms();
                },
                canAddForm: function() {
                    return canAddForm();
                },
                canRemoveAllForms: function() {
                    return canRemoveAllForms();
                },
                // Can remove a form?
                canRemoveForm: function() {
                    return canRemoveForm();
                },
                removeAllForms: function() {
                    return removeAllForms(true);
                },
                removeLastForm: function() {
                    return removeLastForm();
                },
                removeFirstForm: function() {
                    first();
                    return removeForm(getCurrentForm());
                },
                removeForm: function(val) {
                    if (typeof(val) != 'undefined') {
                        val++;
                    }
                    return removeForm(getForm(val));
                },

                /* ----- Advanced ----- */
                inject: function(data) {
                    // Loop over each data using a Proxy (function , context)
                    $.each(data, $.proxy( fillData, source ));
                },
                cloneTemplate: function(){
                    return cloneTemplate();
                },
                count: function(){
                    return count();
                },
                normalizeForms: function(){
                    return normalizeForms();
                },
                setParent: function(p){
                    setParent(p);
                }
            });
        }
        
        function setParent(p){
            parent = p;
        }
        
        var index = 0,
            template = $(this).first(),
            source = $(this).first(),
            forms = [],
            formFields = "input, checkbox, select, textarea",
            form_counter = 0,
            defaults = {
                // Limits
                iniFormsCount: 1,
                maxFormsCount: 20,
                minFormsCount: 1,
                incrementCount: 1 , // add N forms at one time
                removeCurrentSelector: '.' + source.data("template") + '_remove_current',
                allowRemoveCurrent: true,
                indexFormat:'m_index_m',
            },
            parent = null;
            
        if(typeof source.data('max-forms') !== 'undefined'){
            defaults.maxFormsCount = source.data("max-forms");
        }
        
        // Extend source with useful methods
        extendSource(source);
        
        setOptions(options);
        initialize();

        return source;
    };
})(jQuery);

(function($){
    jQuery.fn.sheepIt = function (options){
        /**
         * Handle click on addForm button
         */
        function clickOnAdd(event)
        {
            event.stopPropagation();
            event.preventDefault();
            addForm();
            if(!collapsed) resize();
        }

        /**
         * Handle click on addNForm button
         */
        function clickOnAddN(event)
        {
            event.stopPropagation();
            event.preventDefault();
            if (addNInput.value !== '') {
                addNForms(addNInput.attr('value'));
            }
        }

        /**
         * Handle click on Remove last control
         */
        function clickOnRemoveLast(event)
        {
            event.stopPropagation();
            event.preventDefault();

            if (options.removeLastConfirmation) {
                if ( confirm(options.removeLastConfirmationMsg) ) {
                    removeLastForm();
                }
            } else {
                removeLastForm();
            }
        }

        /**
         * Handle click on Remove all control
         */
        function clickOnRemoveAll(event)
        {
            event.stopPropagation();
            event.preventDefault();

            if (options.removeAllConfirmation) {
                if ( confirm(options.removeAllConfirmationMsg) ) {
                    removeAllForms();
                }
            } else {
                removeAllForms();
            }
        }       

        /**
         * Show/Hide controls according to current state of the forms
         */
        function normalizeControls()
        {            
            // Selector
            var showSelector = false;
            if(templates.length > 1){
                for(var t in templates){
                    if(templates[t].canAddForm()){
                        showSelector = true;
                    }
                }   
            }
            showSelector ? selector.show() : selector.hide();
            
            // Remove buttons
            if (hasForms()) {
                if (getFormsCount() == 1) {
                    removeAll.hideIf();
                    removeLast.showIf();
                } else {
                    removeAll.showIf();
                    removeLast.showIf();
                }

                // Remove current buttons
                var removeCurrents = '';
                if (options.allowRemoveCurrent) {
                    removeCurrents = source.find(options.removeCurrentSelector);
                    if (canRemoveForm()) {
                        // Show remove current buttons of all forms
                        removeCurrents.show();
                    } else {
                        removeCurrents.hide();
                    }
                } else {
                    // Hide all
                    removeCurrents = source.find(options.removeCurrentSelector);
                    removeCurrents.hide();
                }
                noFormsTemplate.hide();
                headerRow.show();

            } else {
                removeLast.hideIf();
                removeAll.hideIf();
                noFormsTemplate.show();
                headerRow.hide();
            }
            
            // Add button
            if (!canAddForm()) {
                add.hideIf();
                addN.hideIf();
            } else {
                add.showIf();
                addN.showIf();
            }

            // Remove buttons only enabled when can remove forms
            if (!canRemoveForm()) {
                removeLast.hideIf();
                removeAll.hideIf();
            }

            if (
                   add.css('display') != 'none'
                || addN.css('display') != 'none'
                || removeAll.css('display') != 'none'
                || removeLast.css('display') != 'none'
            ) {
                controls.show();
            } else {
                controls.hide();
            }
			
            if(disabled) disable();
        }
        
        function normalizeForms(){
            for(var t in templates) templates[t].normalizeForms();
        }

        /**
         * Normalize all (Controls, Forms)
         */
        function normalizeAll()
        {
            normalizeForms();
            normalizeControls();
        }
		
        function disable(){
            var removeCurrents = source.find("a[id$='_remove_current']");
            var controls = $(options.controlsSelector);

            var form_elements = source.find("input[type!='hidden'], textarea, button, select");
            controls.hide();
            removeCurrents.hide();
            form_elements.attr('disabled','disabled');
            disabled = true;
        }

        function enable(){
            var removeCurrents = source.find("a[id$='_remove_current']");
            var controls = $(options.controlsSelector);

            var form_elements = source.find('input, textarea, button, select');
            controls.show();
            removeCurrents.show();
            form_elements.removeAttr('disabled');
            disabled = false;
        }
        
        function close(){
            removeAllForms();
            panel.hide();
        }

        /**
         * Add a new form to the collection
         * 
         * @parameter normalize: avoid normalize all forms if not necessary
         */
        function addForm(normalizeAllafterAdd)
        {
            if (typeof normalizeAllafterAdd == 'undefined') {
                normalizeAllafterAdd = true;
            }
            
            if(!selected_template) return;

            var newForm = templates[selected_template].addForm();
            
            if(newForm){
                headerRow.show();
                (options.insertNewForms == 'after') ? newForm.insertBefore(noFormsTemplate) : newForm.insertAfter(noFormsTemplate);
            }
            else{
                selected_template = false;
                return false;
            }
            
            if(normalizeAllafterAdd) normalizeAll();

           // After add callBack function
           if (typeof options.afterAdd === "function") {
               options.afterAdd(source, newForm);
           }

           return true;
        }

        function addNForms(n, normalize)
        {
            if (typeof n != 'undefined') {
                n = parseFloat(n);
                var x = 1;

                for(x=1; x<=n; x++) {
                    addForm(normalize);
                }
            }
        }
        
        function disableOldRows(){
            for (var x in templates) {
                templates[x].disableOldRows();
            }
        }

        function removeLastForm(normalize)
        {
            if (typeof normalize == 'undefined') {
                normalize = true;
            }

            if (canRemoveForm()) {
                removeForm();

                if (normalize) {
                    normalizeAll();
                }
                return true;

            } else {
                return false;
            }

        }

        function removeAllForms(normalize)
        {
            if (typeof normalize == 'undefined') {
                normalize = true;
            }

            if (canRemoveAllForms()) {
                for (var x in forms) {
                    if ($.isNumeric(x) && forms[x]) {
                        removeForm(forms[x]);
                    }
                }
				
                if (typeof options.afterRemoveCurrent === "function") {
                    options.afterRemoveCurrent(source);
                }
			
                if (normalize) {
                    normalizeAll();
                }
                return true;
            } else {
                return false;
            }

        }

        /**
         * Count the current elements
         */
        function count()
        {
            var count = 0;
            for(var t in templates){
                count += templates[t].count();
            }
            return count;
        }

        /*---------------- /ITERATOR METHODS ----------------*/

        function getFormsCount()
        {
            return count();
        }

        /**
         * Get the current form based on the interal pointer
         */
        function getCurrentForm()
        {
            if ( current() !== false) {
                return forms[current()];
            } else {
                return false;
            }
        }
        
        /**
         * Get active forms
         */
        function getForms()
        {
            if (hasForms()) {
               //first();
               
               var x = 0;
               var activeForms = [];
               for (x=0; x<getFormsCount(); x++) {
                   activeForms.push(getCurrentForm());
                   next();
               }
               return activeForms;
            } else {
                return false;
            }
        }

        function hasForms()
        {
            for(var t in templates){
                if(templates[t].hasForms()) return true;
            }
            return false;
        }

        function canAddForm()
        {
            var retorno = false;
            
            if(!selected_template){
                //return false;
                retorno = false;
            }

            if (templates[selected_template].getOption('maxFormsCount') == 0) {
                retorno = true;
                //return true;
            } else {
                //return (templates[selected_template].count() < templates[selected_template].getOption('maxFormsCount')) ? true : false;
                retorno = (templates[selected_template].count() < templates[selected_template].getOption('maxFormsCount')) ? true : false;
            }
            return retorno;
        }

        /**
         * Checks if can remove any form
         */
        function canRemoveForm()
        {
            return (getFormsCount() > options.minFormsCount) ? true : false;
        }

        function canRemoveAllForms()
        {
           return (options.minFormsCount == 0) ? true : false;
        }

        function isInDom(object)
        {
            if ( $("#" + object.attr('id')).length > 0 ) {
                 return true;
            } else {
                return false;
            }
        }

        /**
         * Controls the whole process of data injection
         *
         */
        function fillData(index, values)
        {
            
            var form = '';

            // Position
            if (typeof(index) == 'number') {

                // Correction of index to position
                index++;

                // Need more forms?
                if ((index) > getFormsCount()) {
                   addForm();
                }

                form = getForm(index);
                
                fillForm(form, values);
            } 
            // Form Id
            else if(typeof(index) == 'string') {
                
                form = $('#'+index);
                fillForm(form, values);
            }
            
            if (typeof options.afterFill === "function") {
                options.afterFill(source, form, values);
            }
                
        }

        function fillForm(form, data)
        {
            var x = 0;

            // For each element, try to get the correct field or fields
            $.each(data, function(index, value) {
                
                var formId = source.attr('id');
                var formIndex = form.data('formIndex');



                // Replace form Id and form Index with current values
                if (index.indexOf('#form#') != -1 || index.indexOf('#index#') != -1) {
                    index = index.replace('#form#', formId);
                    index = index.replace('#index#', formIndex);
                } else {
                    index = formId + '_' + formIndex + '_' + index;
                }
                
                              
                // Search by id
                var field = form.find(':input[id="' + index + '"]');

                // Search by name
                if (field.length == 0) {

                    // Search by name
                    field = form.find(':input[name="' + index + '"]');

                    if (field.length == 0) {
                        // Search by name array format
                        field = form.find(':input[name="' + index + '[]"]');
                    } 
                }
                
                

                // Field was found
                if (field.length > 0) {
					
                    // Multiple values?
                    var mv = false;
                    if (typeof(value) == 'object') {
                        mv = true;
                    }

                    // Multiple fields?
                    var mf = false;
                    if (field.length > 1) {
                        mf = true;
                    }

                    if (mf) {

                        if (mv) {
							
                            var fieldsToFill = [];
                            fieldsToFill['fields'] = [];
                            fieldsToFill['values'] = [];

                            x = 0;
                            for (x in value) {
                                 fieldsToFill['fields'].push(field.filter('[value="'+ value[x] +'"]'));
                                 fieldsToFill['values'].push(value[x]);
                            }
                            x = 0;
                            for (x in fieldsToFill['fields']) {
                                fillFormField(fieldsToFill['fields'][x] , fieldsToFill['values'][x]);
                            }
                        } else {
                            fillFormField( field.filter('[value="'+ value +'"]', value) );
                        }
                    } else {
                        if (mv) {
                            x = 0;
                            for (x in value) {
                                fillFormField(field, value[x]);
                            }
                        } else {
                           fillFormField(field, value);
                        }
                    }
                }
                // Field not found in this form try search inside nested forms
                else {
                    if ( typeof(form.data('nestedForms')) != 'undefined') {
                        if (form.data('nestedForms').length > 0) {
                            x = 0;
                            for (x in form.data('nestedForms')) {

                                if (index == form.data('nestedForms')[x].attr('id') && typeof(value) == 'object') {
                                    form.data('nestedForms')[x].inject(value);
                                }
                            }

                        }
                    }
                }
                
            });
            

        }

        function fillFormField(field, value)
        {
            var type = field.attr('type');

            // hidden, text, password
            if (type == 'text' || type == 'hidden' || type == 'password') {
                field.attr('value', value);
                return true;
            }
            // textarea
            else if(type == 'textarea') {
                field.text(value);
                return true;
            }
            // checkbox, radio button
            else if(type == 'checkbox' || type == 'radio') {
                field.attr("checked", "checked");
                return true;
            }
            // select-one, select-multiple
            else if (type == 'select-one' || type == 'select-multiple') {
                field.find("option").each(function() {
                    if($(this).text() == value || $(this).attr("value") == value) {
                            $(this).attr("selected", "selected");
                    }
                });
                return true;
            } else {
                return false;
            }
        }

        function hasSeparator()
        {
            if (options.separator != '') {
                return true;
            } else {
                return false;
            }
        }

        function getSeparator()
        {
            if (hasSeparator()) {
                return $(options.separator);
            } else {
                return false;
            }
        }

        function setOptions(newOptions) 
        {
            options = [];
            options = $.extend(defaults, newOptions);
            normalizeOptions(options);
        }

        function getOptions()
        {
            return options;
        }

        function initialize()
        {
            // Hide forms during initialization
            source.hide();

            /**
             * Controls
             */
            selector = $(options.selectorSelector);
            add = $(options.addSelector);
            addN = $(options.addNSelector);
            addNInput = $(options.addNInputSelector);
            addNButton = $(options.addNButtonSelector);
            removeLast = $(options.removeLastSelector);
            removeAll = $(options.removeAllSelector);
            controls = $(options.controlsSelector);

            if (add.length == 0) {
                options.allowAdd = false;
            }
            if (addN.length == 0) {
                options.allowAddN = false;
            }
            if (removeLast.length == 0) {
                options.allowRemoveLast = false;
            }
            //if (removeAll.length == 0) {
                options.allowRemoveAll = false;
            //}

            // Extend basic controls with new methods used inside this plugin
            extendControl(add, options.allowAdd, clickOnAdd);
            extendControl(addN, options.allowAddN, clickOnAddN, addNButton);
            extendControl(removeLast, options.allowRemoveLast, clickOnRemoveLast);
            extendControl(removeAll, options.allowRemoveAll, clickOnRemoveAll);

            // Initialize controls
            add.init();
            addN.init();
            removeLast.init();
            removeAll.init();

            /**
             * Templates
             */
            var templatesForm = $(options.formTemplateSelector);
            noFormsTemplate = $(options.noFormsTemplateSelector);
            
            headerRow = $(options.headerRow, source);
            
            // Get the template for clonning
            if(templatesForm.length == 1){
                selected_template = $(templatesForm[0]).data('selector');
            }
                    
            for(var i = 0; i < templatesForm.length; i++){
                templates[$(templatesForm[i]).data('selector')] = $(templatesForm[i]).sheepItTemplate();
                templates[$(templatesForm[i]).data('selector')].setParent(source);
                $(templatesForm[i]).remove();
            }
            
            /**
             * Forms initialization
             */
            // Initial forms
            for(var t in templates){
                var temp_options = templates[t].getOptions();
                if ( temp_options.iniFormsCount > templates[t].count()) {
                    var b = temp_options.iniFormsCount-templates[t].count();
                    for (var x=1; x<=b; x++) {
                        addForm(false);
                    }
                }
            }

            /**
             * Data injection
             */
            if(options.data){
                source.inject(options.data);
            }

            normalizeAll();

            source.show();
        }

        /**
         * Extend passed control with new methods used by this plugin
         */
        function extendControl(control, allowControlOption , onClickFunction, onClickSubControl)
        {
            /**
             * onClickSubControl es utilizado cuando el control principal no es el que recibe el click
             */
            if (typeof(onClickSubControl) == 'undefined') {
                onClickSubControl = false;
            }

            $.extend( control, {
                hideIf : function(duration, callback) {
                    if (allowControlOption) {
                        control.hide(duration, callback);
                    }
                },
                showIf: function(duration, callback) {
                    if (allowControlOption) {
                        control.show(duration, callback);
                    }
                },
                init: function() {
                    if (allowControlOption) {
                        // Click event
                        if (onClickSubControl) {
                            onClickSubControl.click(onClickFunction);
                        } else {
                            control.click(onClickFunction);
                        }
                        control.show();
                    } else {
                        control.hide();
                    }
                }
            });
        }

        /**
         * Extends source object with many useful methods,
         * used to control sheepIt forms with javascript
         */
        function extendSource(source)
        {
            // API
            $.extend( source, {
                /* ------Custom--------*/
                disable: function(){
                    disable();
                },
                enable: function(){
                    enable();
                },
                disableOldRows: function(){
                  return disableOldRows();  
                },
                /* ----- Controls ----- */
                getAddControl: function() {
                    return add;
                },
                getAddNControl: function() {
                    return addN;
                },
                getRemoveLastControl: function() {
                    return removeLast;
                },
                getRemoveAllControl: function() {
                    return removeAll;
                },

                /* ----- Options ----- */
                getOptions: function() {
                    return getOptions();
                },
                getOption: function(option) {
                    return options[option];
                },
                setOption: function(option, value) {
                    if (typeof(option) != 'undefined' && typeof(value) != 'undefined') {
                        options[option] = value;
                        return options[option];
                    } else {
                        return false;
                    }
                },

                getTemplates: function(){
                    return templates;
                },

                getSelectedTemplate: function(){
                    return selected_template;
                },

                /* ----- Forms ----- */
                // Get all Forms
                getForms: function() {
                    return getForms();
                },
                // Alias of getForms
                getAllForms: function() {
                    return getForms();
                },
                getForm: function(val) {
                    if (typeof(val) != 'undefined') {
                        val++;
                    } 
                    return getForm(val);
                },
                getLastForm: function() {
                    return getForm();
                },
                getFirstForm: function() {
                    first();
                    return getCurrentForm();
                },
                addForm: function() {
                    return addForm();
                },
                addNForms: function(n) {
                    return addNForms(n);
                },
                // Number of active forms
                getFormsCount: function() {
                    return getFormsCount();
                },
                hasForms: function() {
                    return hasForms();
                },
                canAddForm: function() {
                    return canAddForm();
                },
                canRemoveAllForms: function() {
                    return canRemoveAllForms();
                },
                // Can remove a form?
                canRemoveForm: function() {
                    return canRemoveForm();
                },
                removeAllForms: function() {
                    return removeAllForms(true);
                },
                removeLastForm: function() {
                    return removeLastForm();
                },
                removeFirstForm: function() {
                    first();
                    return removeForm(getCurrentForm());
                },
                removeForm: function(val) {
                    if (typeof(val) != 'undefined') {
                        val++;
                    }
                    return removeForm(getForm(val));
                },

                /* ----- Advanced ----- */
                inject: function(data) {

                    // Loop over each data using a Proxy (function , context)
                    $.each(data, $.proxy( fillData, source ));
                },
                resize: function(){
                    return resize();
                },
                close: function(){
                    return close();
                },
                normalizeAll: function(){
                    normalizeAll();
                }
                    
            });

        }

        /**
         * Normalize options
         */
        function normalizeOptions(options)
        {
            // Normalize limits options
            if (options.maxFormsCount > 0) {
                if (options.maxFormsCount < options.minFormsCount) {
                    options.maxFormsCount = options.minFormsCount;
                }
                if (options.iniFormsCount < options.minFormsCount || options.iniFormsCount > options.maxFormsCount) {
                    options.iniFormsCount = options.minFormsCount;
                }
            } else {
                if (options.iniFormsCount < options.minFormsCount) {
                    options.iniFormsCount = options.minFormsCount;
                }
            }

            if (!canRemoveAllForms()) {
                options.allowRemoveAll = false;
            }
        }
        
        
        function setTemplate(temp_name){
            selected_template = temp_name;
        }
        
        function resize(){
            if(collapsed){
                collapsed = false;
                $(panel).removeClass("full").addClass("small");
            }
            else{
                collapsed = true;
                $(panel).removeClass("small").addClass("full");
            }
            
            $(source).collapse('toggle');
        }
        



        /**
         * Gets the first element of the collection and decorates with jquery
         */
        var source = $(this).first();
        var panel = $(source).parent('.panel');
        
        // Extend source with useful methods
        extendSource(source);

        var headerRow,
            selector,
            add,
            addN,
            addNInput,
            addNButton,
            removeLast,
            removeCurrent,
            removeAll,
            controls,
            templates = {},
            selected_template = false,
            noFormsTemplate,
            ip =  false, // Internal ip
            disabled = false,
            collapsed = true,
            // Default options
            defaults = {
                
                // Controls selectors
                selectorSelector: '#' + $(this).attr("id") + '_selector',
                addSelector: '#' + $(this).attr("id") + '_add',
                addNSelector: '#' + $(this).attr("id") + '_add_n',
                addNInputSelector: '#' + $(this).attr("id") + '_add_n_input',
                addNButtonSelector: '#' + $(this).attr("id") + '_add_n_button',
                removeLastSelector: '#' + $(this).attr("id") + '_remove_last',
                removeAllSelector: '#' + $(this).attr("id") + '_remove_all',
                controlsSelector: '#' + $(this).attr("id") + '_controls',
                labelSelector: '#' + $(this).attr("id") + '_label',
                headerRow: '.header_sheep_it_duplicator',

                // Controls options
                allowRemoveLast: true,
                allowRemoveAll: false,
                allowAdd: false,
                allowAddN: false,

                // Confirmations
                removeLastConfirmation: false,
                removeCurrentConfirmation: false,
                removeAllConfirmation: true,
                removeLastConfirmationMsg: 'Are you sure?',
                removeCurrentConfirmationMsg: 'Are you sure?',
                removeAllConfirmationMsg: 'Are you sure?',

                // Templates
                formTemplateSelector: '[id^=' + $(this).attr("id") + '_template]',
                noFormsTemplateSelector: '#' + $(this).attr("id") + '_noforms_template',
                separator: '<div style="width:100%; border-top:1px solid #ff0000; margin: 10px 0px;"></div>',

            // Limits
            iniFormsCount: 1,
            maxFormsCount: 20, // 0 = no limit
            minFormsCount: 1,
            incrementCount: 1 , // add N forms at one time
            noFormsMsg: 'No forms to display',

            // Advanced options
            data: [], // A JSON based representation of the data which will prefill the form (equivalent of the inject method)
            pregeneratedForms: [],
            nestedForms: [],
            isNestedForm: false,
            parentForm: {},
            beforeClone: function() {},
            afterClone: function() {},
            beforeAdd: function() {},
            afterAdd: function() {},
            afterFill: function() {},
            afterRemoveCurrent: function(){},
            beforeRemoveCurrent: function(){},
            insertNewForms: 'after',
            continuousIndex: true //Keep index continuous and starting from 0 
        };

        setOptions(options);
        initialize();

        return source;
    };

    /**
     * JQuery original clone method decorated in order to fix an IE < 8 issue
     * where attributs especially name are not copied
     */
    jQuery.fn.cloneWithAttribut = function( withDataAndEvents ){
        if ( jQuery.support.noCloneEvent ){
            return $(this).clone(withDataAndEvents);
        }else{
            $(this).find("*").each(function(){
                $(this).data("name", $(this).attr("name"));
            });
            var clone = $(this).clone(withDataAndEvents);

            clone.find("*").each(function(){
                $(this).attr("name", $(this).data("name"));
            });

            return clone;
        }
    };	
	
})(jQuery);
